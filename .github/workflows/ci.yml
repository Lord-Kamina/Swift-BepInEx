# The name of the GitHub Actions workflow.
name: Build, Test, and Release

# --- Trigger Conditions ---
on:
  # 1. Trigger on pushes to the `main` or `master` branch.
  #    This is useful for continuous integration but will NOT create a release.
  push:
    branches: [ main, master ]
  
  # 2. **PRIMARY RELEASE TRIGGER**: Trigger when a tag starting with 'v' is pushed.
  #    e.g., v1.0, v1.0.1, v1.2-beta
  pull_request:
    branches: [ main, master ]

  # 3. Allow manual triggering from the GitHub Actions UI.
  workflow_dispatch:

# --- Workflow Jobs ---
jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ 'macos-13', 'macos-14' ]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # Required to create releases

    steps:
      # Step 1: Check out the repository code
      # fetch-depth: 0 ensures that all history, including all tags, is fetched.
      # This is crucial for getting the correct tag information.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up the Swift environment
      - name: Setup Swift toolchain
        uses: swift-actions/setup-swift@v2

      # Step 3: Build the project in release configuration
      - name: Build project
        run: swift build -c release

      # Step 4: Run the test suite
      - name: Run tests
        run: swift test

      # Step 5: Determine Version and Prepare Artifact Name
      # We extract the tag name if it exists, otherwise we create a dev name.
      # This makes the artifact name dynamic and context-aware.
      - name: Prepare artifact name
        id: prep_artifact
        # This condition prevents this step from running on PRs, saving a little time.
        if: github.event_name != 'pull_request'
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # This is a tag push, use the tag name for the version.
            VERSION=${GITHUB_REF#refs/tags/}
            echo "Using tag as version: $VERSION"
          else
            # This is a manual run or a push to main. Create a dev version string.
            VERSION="dev-$(git rev-parse --short HEAD)"
            echo "Using dev version: $VERSION"
          fi
          # Save the version and artifact name for later steps
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "artifact_name=Swift-BepInEx-Launcher-${VERSION}-$(uname -m).zip" >> "$GITHUB_OUTPUT"

      # Step 6: Package the binary for release
      # This step also skips running on pull requests.
      - name: Package the binary
        if: github.event_name != 'pull_request'
        run: |
          # Use the artifact name determined in the previous step.
          zip -j ${{ steps.prep_artifact.outputs.artifact_name }} .build/release/Swift-BepInEx-Launcher \
          README.md \
          CHANGELOG.md \
          LICENSE.md
        
      # Step 7: Create a GitHub Release and upload the artifact
      # THIS STEP ONLY RUNS ON A TAG PUSH. It is the primary release mechanism.
      - name: Create GitHub Release from Tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          # Use the exact tag that triggered the workflow.
          tag_name: ${{ github.ref_name }}
          
          # The release title will include the tag name, e.g., "Release v1.0.1".
          name: "Release ${{ github.ref_name }}"
          
          # Mark releases containing a hyphen (e.g., v1.1-beta, v1.2-rc1) as pre-releases.
          # Full releases like v1.0.0 will not be marked as pre-releases.
          prerelease: ${{ contains(github.ref_name, '-') }}
          
          # List of files to upload as release assets.
          # Use the artifact name generated by the 'prep_artifact' step.
          files: |
            ${{ steps.prep_artifact.outputs.artifact_name }}